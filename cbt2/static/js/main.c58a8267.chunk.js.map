{"version":3,"sources":["TalkListItem.js","TalkListHeader.js","MobilePager.js","DesktopPager.js","config.js","TalkList.js","TalkDetails.js","App.js","serviceWorker.js","index.js"],"names":["talkListItem","css","_templateObject","title","_templateObject2","speaker","_templateObject3","talkLink","_templateObject4","date","_templateObject5","TalkListItem","_ref","Talk","react","Link","to","concat","id","className","dateParts","split","formatDate","date_entered","talkListHeader","TalkListHeader_templateObject","TalkListHeader_templateObject2","TalkListHeader_templateObject3","TalkListHeader_templateObject4","TalkListHeader","mobilePager","MobilePager_templateObject","MobilePager","loadNextPage","endIndex","onClick","desktopPager","DesktopPager_templateObject","DesktopPager","startIndex","total","config","list","TalkList_templateObject","TalkList","state","talkList","loadMore","e","console","log","_this","setState","_this2","this","axios","then","response","data","slice","map","talk","react_default","a","createElement","src_TalkListItem","key","src_TalkListHeader","src_DesktopPager","length","src_MobilePager","Component","TalkDetails","match","params","appHeading","App_templateObject","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c58a8267.chunk.js","sourcesContent":["import * as React from 'react';\nimport { css } from 'react-emotion';\nimport { Link } from \"react-router-dom\";\n\nconst talkListItem = css`\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: 1fr 1fr;\n  margin-bottom: 8px;\n  border: 1px solid #cccccc;\n  border-radius: 2px;\n  padding: 8px;\n  &:hover {\n    background-color: grey;\n  }\n\n  @media (min-width: 46em) {\n    grid-template-columns: 2fr 1fr 1fr;\n    border: 0px;\n    border-radius: 0px;\n    padding: 4px;\n    grid-gap: 4px;\n  }\n`;\nconst title = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media (max-width: 46em) {\n    grid-column: 1/3;\n    font-weight: 600;\n  }\n`;\n\nconst speaker = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst talkLink = css`\n    text-decoration: none;\n    color: black;\n`;\nconst date = css`\n    text-align: right;\n`;\n\n\nconst TalkListItem = ({ Talk }) => {\n  // console.log(Talk);\n  return (\n    <Link to={`/details/${Talk.id}`} className={talkLink}>\n    <div className={talkListItem}>\n      <div className={title}>{Talk.title}</div>\n      <div className={speaker}>{Talk.speaker}</div>\n      <div className={date}>{formatDate(Talk.date_entered)}</div>\n    </div>\n    </Link>\n  );\n};\n\nexport default TalkListItem;\n\nfunction formatDate(date) {\n\n  const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  const dateParts = date.split('-');\n\n  return `${shortMonths[dateParts[1] - 1]} ${dateParts[0]}`;\n}","import * as React from 'react';\nimport { css } from 'react-emotion';\n\nconst talkListHeader = css`\n  display: none;\n  grid-gap: 2px;\n  margin-bottom: 8px;\n\n  @media (min-width: 46em) {\n    display: grid;\n    grid-template-columns: 2fr 1fr 1fr;\n    padding: 4px;\n    grid-gap: 4px;\n  }\n`;\nconst title = css`\n  font-weight: 600;\n`;\n\nconst speaker = css`\n  font-weight: 600;\n`;\n\n\nconst date = css`\n  font-weight: 600;\n  text-align: right;\n`;\n\n\nconst TalkListHeader = () => {\n  return (\n    <div className={talkListHeader}>\n      <div className={title}>Title</div>\n      <div className={speaker}>Speaker</div>\n      <div className={date}>Date Created</div>\n    </div>\n  );\n};\n\nexport default TalkListHeader;\n","import * as React from 'react';\nimport { css } from 'react-emotion';\n\nconst mobilePager = css`\n  text-align: right;\n  padding: 24px;\n  @media (min-width: 46em) {\n    display: none\n  }\n`;\n\nconst MobilePager = ({ loadNextPage, endIndex }) => {\n\n    const handleLoadMore = () => {\n        loadNextPage(0, endIndex + 10)\n    }\n\n    return (\n      <div onClick={handleLoadMore} className={mobilePager}>\n            Load more\n      </div>\n    );\n};\n\nexport default MobilePager;","import * as React from 'react';import { css } from 'react-emotion';\n\nconst desktopPager = css`\n  text-align: right;\n  padding: 24px;\n  @media (max-width: 46em) {\n    display: none\n  }\n`;\n\nconst DesktopPager = ({ loadNextPage, startIndex, endIndex, total }) => {\n\n    const handleLoadMore = () => {\n        if (startIndex === 0 && endIndex > 10) {\n            startIndex = endIndex - 10;\n        }\n        loadNextPage(startIndex + 10, endIndex + 10)\n    }\n\n    return (\n      <div onClick={handleLoadMore} className={desktopPager}>\n            Load next page\n      </div>\n    );\n};\n\nexport default DesktopPager;","export const config = {\n    appName: 'Christadelphian Bible Talks',\n    apiUrl: 'https://christadelphianbibletalks.com/api/v2/studies/list?params={%22where%22:{%22approved%22:2},%22orderBy%22:%22date_entered%22,%22order%22:%22DESC%22,%22offset%22:0,%22count%22:100}'\n}","import React, { Component } from 'react';\nimport * as axios from 'axios';\nimport { css } from 'react-emotion';\n\nimport TalkListItem from './TalkListItem';\nimport TalkListHeader from './TalkListHeader';\nimport MobilePager from './MobilePager';\nimport DesktopPager from './DesktopPager';\nimport { config } from './config';\n\nconst list = css`\n  max-width: 1200px;\n  padding: 24px;\n  margin: auto;\n`;\n\nclass TalkList extends Component {\n  state = {\n    talkList: [],\n    startIndex: 0,\n    endIndex: 10\n  }\n  loadMore = e => {\n    console.log(e);\n    this.setState({\n      startIndex: 0,\n      endIndex: e\n    }\n    );\n  }\n  loadNextPage = (startIndex, endIndex) => {\n    this.setState({\n      startIndex,\n      endIndex\n    });\n  }\n  componentDidMount() {\n    axios.get(config.apiUrl)\n      .then(response => {\n        this.setState({ talkList: response.data })\n      });\n  }\n\n  render() {\n    var talkList = this.state.talkList\n      .slice(this.state.startIndex, this.state.endIndex)\n      .map(function (talk) {\n        return <TalkListItem key={talk.id} Talk={talk} />;\n      })\n\n    return <div>\n      <ul className={list}>\n      <TalkListHeader />\n        {talkList}\n      </ul>\n      <DesktopPager total={this.state.talkList.length} startIndex={this.state.startIndex} endIndex={this.state.endIndex} loadNextPage={this.loadNextPage} ></DesktopPager>\n      <MobilePager endIndex={this.state.endIndex} loadNextPage={this.loadNextPage} ></MobilePager>\n    </div>\n  }\n}\n\nexport default TalkList;\n","import * as React from 'react';\n\nconst TalkDetails = ({ match }) => {\n  return (\n    <div>Full details will show here  for Talk id : {match.params.id}</div>\n  );\n};\n\nexport default TalkDetails;\n\n","import React, { Component } from 'react';\nimport { css } from 'react-emotion';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './App.css';\nimport TalkList from './TalkList';\nimport TalkDetails from './TalkDetails';\nimport { config } from './config'\n\nconst appHeading = css`\n  width: 95%;\n  margin: auto\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <h1 className={appHeading}>{config.appName}</h1>\n          <Route exact path=\"/\" component={TalkList} />\n          <Route path=\"/details/:id\" component={TalkDetails} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}