{"version":3,"sources":["TalkListItem.js","TalkListHeader.js","MobilePager.js","DesktopPager.js","config.js","TalkList.js","TalkDetails.js","App.js","serviceWorker.js","index.js"],"names":["talkListItem","css","_templateObject","title","_templateObject2","speaker","_templateObject3","talkLink","_templateObject4","date","_templateObject5","TalkListItem","_ref","Talk","react","Link","to","concat","id","className","dateParts","split","formatDate","date_entered","talkListHeader","TalkListHeader_templateObject","TalkListHeader_templateObject2","TalkListHeader_templateObject3","TalkListHeader_templateObject4","TalkListHeader","mobilePager","MobilePager_templateObject","MobilePager","loadPage","endIndex","total","onClick","pagingBar","DesktopPager_templateObject","jumpTo","DesktopPager_templateObject2","currentPage","DesktopPager_templateObject3","previousLink","DesktopPager_templateObject4","nextLink","DesktopPager_templateObject5","DesktopPager","startIndex","next","previous","jumpToLinks","range","map","num","page","style","key","config","list","TalkList_templateObject","TalkList","state","talkList","loadMore","e","console","log","_this","setState","_this2","this","axios","then","response","data","slice","talk","react_default","a","createElement","src_TalkListItem","totalTalks","length","src_TalkListHeader","src_DesktopPager","src_MobilePager","Component","TalkDetails","match","params","appHeading","App_templateObject","App","BrowserRouter","basename","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc5c67f4.chunk.js","sourcesContent":["import * as React from 'react';\nimport { css } from 'react-emotion';\nimport { Link } from \"react-router-dom\";\n\nconst talkListItem = css`\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: 1fr 1fr;\n  margin-bottom: 8px;\n  border: 1px solid #cccccc;\n  border-radius: 2px;\n  padding: 8px;\n  &:hover {\n    background-color: grey;\n  }\n\n  @media (min-width: 46em) {\n    grid-template-columns: 2fr 1fr 1fr;\n    border: 0px;\n    border-radius: 0px;\n    padding: 4px;\n    grid-gap: 4px;\n  }\n`;\nconst title = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media (max-width: 46em) {\n    grid-column: 1/3;\n    font-weight: 600;\n  }\n`;\n\nconst speaker = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst talkLink = css`\n    text-decoration: none;\n    color: black;\n`;\nconst date = css`\n    text-align: right;\n`;\n\n\nconst TalkListItem = ({ Talk }) => {\n  // console.log(Talk);\n  return (\n    <Link to={`/details/${Talk.id}`} className={talkLink}>\n    <div className={talkListItem}>\n      <div className={title}>{Talk.title}</div>\n      <div className={speaker}>{Talk.speaker}</div>\n      <div className={date}>{formatDate(Talk.date_entered)}</div>\n    </div>\n    </Link>\n  );\n};\n\nexport default TalkListItem;\n\nfunction formatDate(date) {\n\n  const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  const dateParts = date.split('-');\n\n  return `${shortMonths[dateParts[1] - 1]} ${dateParts[0]}`;\n}","import * as React from 'react';\nimport { css } from 'react-emotion';\n\nconst talkListHeader = css`\n  display: none;\n  grid-gap: 2px;\n  margin-bottom: 8px;\n\n  @media (min-width: 46em) {\n    display: grid;\n    grid-template-columns: 2fr 1fr 1fr;\n    padding: 4px;\n    grid-gap: 4px;\n  }\n`;\nconst title = css`\n  font-weight: 600;\n`;\n\nconst speaker = css`\n  font-weight: 600;\n`;\n\nconst date = css`\n  font-weight: 600;\n  text-align: right;\n`;\n\nconst TalkListHeader = () => {\n  return (\n    <div className={talkListHeader}>\n      <div className={title}>Title</div>\n      <div className={speaker}>Speaker</div>\n      <div className={date}>Date Created</div>\n    </div>\n  );\n};\n\nexport default TalkListHeader;\n","import * as React from 'react';\nimport { css } from 'react-emotion';\n\nconst mobilePager = css`\n  text-align: right;\n  padding: 24px;\n  @media (min-width: 46em) {\n    display: none\n  }\n`;\n\nconst MobilePager = ({ loadPage, endIndex, total }) => {\n\n    const handleLoadMore = () => {\n        loadPage(0, endIndex + 10)\n    }\n\n    return (\n      endIndex + 10 <= total && \n      <div onClick={handleLoadMore} className={mobilePager}>\n            Load more\n      </div>\n    );\n};\n\nexport default MobilePager;","import * as React from 'react';\nimport { css } from 'react-emotion';\nimport { range } from 'lodash';\n\nconst pagingBar = css`\n  display: flex;\n  @media (max-width: 46em) {\n    display: none\n  }\n`;\n\nconst jumpTo = css`\n  padding: 0 8px;\n  cursor: pointer;\n  &:hover {\n      background-color: grey;\n  }\n`;\n\nconst currentPage = css`\n  ${jumpTo}\n  font-weight: 600;\n  color: blue;\n`;\n\nconst previousLink = css`\n  margin-left: auto;\n`;\n\nconst nextLink = css`\n  width: 65px;\n`;\n\nconst DesktopPager = ({ loadPage, startIndex, endIndex, total }) => {\n\n    const handleLoadNext = () => {\n        if (startIndex === 0 && endIndex > 10) {\n            startIndex = endIndex - 10;\n        }\n        loadPage(startIndex + 10, endIndex + 10)\n    }\n\n    const handleLoadPrevious = () => {\n        if (startIndex === 0 && endIndex > 10) {\n            startIndex = endIndex - 10;\n        }\n        loadPage(startIndex - 10, endIndex - 10)\n    }\n    const handleJumpTo = (page) => () => {\n        loadPage(page * 10, page * 10 + 10)\n    }\n\n    const next = endIndex + 10 <= total && <div onClick={handleLoadNext}>Next</div>\n    const previous = endIndex > 10 && <div onClick={handleLoadPrevious}>Previous</div>\n    const jumpToLinks = range(0, total/10).map((num) => {\n        const style = (endIndex / 10 === num + 1) ? currentPage : jumpTo;\n        return <div onClick={handleJumpTo(num)} className={style} key={num}>{num + 1}</div>;\n    })\n\n    return (\n        <div className={pagingBar}>\n            <div> Showing {startIndex + 1} to {endIndex} of {total} </div>\n            <div className={previousLink}>{previous}</div>\n\n            {jumpToLinks}\n \n            <div className={nextLink}>{next}</div> \n        </div>\n    );\n};\n\nexport default DesktopPager;\n","export const config = {\n    appName: 'Christadelphian Bible Talks',\n    apiUrl: 'https://christadelphianbibletalks.com/api/v2/studies/list?params={%22where%22:{%22approved%22:2},%22orderBy%22:%22date_entered%22,%22order%22:%22DESC%22,%22offset%22:0,%22count%22:100}'\n}","import React, { Component } from 'react';\nimport * as axios from 'axios';\nimport { css } from 'react-emotion';\n\nimport TalkListItem from './TalkListItem';\nimport TalkListHeader from './TalkListHeader';\nimport MobilePager from './MobilePager';\nimport DesktopPager from './DesktopPager';\nimport { config } from './config';\n\nconst list = css`\n  max-width: 1200px;\n  padding: 24px;\n  margin: auto;\n`;\n\nclass TalkList extends Component {\n  state = {\n    talkList: [],\n    startIndex: 0,\n    endIndex: 10\n  }\n  loadMore = e => {\n    console.log(e);\n    this.setState({\n      startIndex: 0,\n      endIndex: e\n    }\n    );\n  }\n  loadPage = (startIndex, endIndex) => {\n    this.setState({\n      startIndex,\n      endIndex\n    });\n  }\n  componentDidMount() {\n    axios.get(config.apiUrl)\n      .then(response => {\n        this.setState({ talkList: response.data })\n      });\n  }\n\n  render() {\n    const talkList = this.state.talkList\n      .slice(this.state.startIndex, this.state.endIndex)\n      .map(function (talk) {\n        return <TalkListItem key={talk.id} Talk={talk} />;\n      })\n\n    const totalTalks = this.state.talkList.length;\n\n    return <div>\n      <ul className={list}>\n        <TalkListHeader />\n        {talkList}\n      </ul>\n      <DesktopPager\n        total={totalTalks}\n        startIndex={this.state.startIndex}\n        endIndex={this.state.endIndex}\n        loadPage={this.loadPage} ></DesktopPager>\n\n      <MobilePager\n        total={totalTalks}\n        endIndex={this.state.endIndex}\n        loadPage={this.loadPage} ></MobilePager>\n    </div>\n  }\n}\n\nexport default TalkList;\n","import * as React from 'react';\n\nconst TalkDetails = ({ match }) => {\n  return (\n    <div>Full details will show here  for Talk id : {match.params.id}</div>\n  );\n};\n\nexport default TalkDetails;\n\n","import React, { Component } from 'react';\nimport { css } from 'react-emotion';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './App.css';\nimport TalkList from './TalkList';\nimport TalkDetails from './TalkDetails';\nimport { config } from './config'\n\nconst appHeading = css`\n  width: 95%;\n  margin: auto\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={'/cbt'}>\n        <div className=\"App\">\n          <h1 className={appHeading}>{config.appName}</h1>\n          <Route exact path=\"/\" component={TalkList} />\n          <Route path=\"/details/:id\" component={TalkDetails} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}