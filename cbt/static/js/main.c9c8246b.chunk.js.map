{"version":3,"sources":["components/TalkListItem.js","components/TalkListHeader.js","components/MobilePager.js","components/DesktopPager.js","components/Loading.js","config.js","components/ListLoader.js","components/TalkStore.js","components/TalkList.js","components/TalkDetails.js","App.js","serviceWorker.js","index.js"],"names":["talkListItem","css","_templateObject","title","_templateObject2","speaker","_templateObject3","talkLink","_templateObject4","date","_templateObject5","TalkListItem","_ref","talk","react","Link","to","concat","id","className","dateParts","split","formatDate","date_entered","talkListHeader","TalkListHeader_templateObject","TalkListHeader_templateObject2","TalkListHeader_templateObject3","TalkListHeader_templateObject4","TalkListHeader","mobilePager","MobilePager_templateObject","MobilePager","loadPage","endIndex","total","onClick","console","log","pagingBar","DesktopPager_templateObject","jumpTo","DesktopPager_templateObject2","currentPage","DesktopPager_templateObject3","previousLink","DesktopPager_templateObject4","nextLink","DesktopPager_templateObject5","DesktopPager","startIndex","next","previous","jumpToLinks","range","map","num","page","style","key","ripple","keyframes","Loading_templateObject","loading","Loading_templateObject2","Loading","config","ListLoader","_ref$listState","listState","list","updateList","render","path","_useState","useState","_useState2","Object","slicedToArray","setLoading","useEffect","length","axios","then","response","data","react_default","a","createElement","components_Loading","TalkContext","React","createContext","TalkStore","children","talkList","setTalkList","_useState3","_useState4","setStartIndex","_useState5","_useState6","setEndIndex","Provider","value","listWrapper","TalkList_templateObject","components_TalkListHeader","slice","components_TalkListItem","components_DesktopPager","components_MobilePager","TalkList","Consumer","talkState","components_ListLoader","TalkDetails","match","params","appHeading","App_templateObject","App","BrowserRouter","basename","components_TalkStore","Route","exact","component","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9c8246b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { css } from 'react-emotion';\nimport { Link } from \"react-router-dom\";\n\nconst talkListItem = css`\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: 1fr 1fr;\n  margin-bottom: 8px;\n  border: 1px solid #cccccc;\n  border-radius: 2px;\n  padding: 8px;\n  &:hover {\n    background-color: grey;\n  }\n\n  @media (min-width: 46em) {\n    grid-template-columns: 2fr 1fr 1fr;\n    border: 0px;\n    border-radius: 0px;\n    padding: 4px;\n    grid-gap: 4px;\n  }\n`;\nconst title = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media (max-width: 46em) {\n    grid-column: 1/3;\n    font-weight: 600;\n  }\n`;\n\nconst speaker = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst talkLink = css`\n    text-decoration: none;\n    color: black;\n`;\nconst date = css`\n    text-align: right;\n`;\n\nconst TalkListItem = ({ talk }) => {\n  return (\n    <Link to={`/details/${talk.id}`} className={talkLink}>\n    <div className={talkListItem}>\n      <div className={title}>{talk.title}</div>\n      <div className={speaker}>{talk.speaker}</div>\n      <div className={date}>{formatDate(talk.date_entered)}</div>\n    </div>\n    </Link>\n  );\n};\n\nexport default TalkListItem;\n\nfunction formatDate(date) {\n\n  const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  const dateParts = date.split('-');\n\n  return `${shortMonths[dateParts[1] - 1]} ${dateParts[0]}`;\n}","import * as React from 'react';\nimport { css } from 'react-emotion';\n\nconst talkListHeader = css`\n  display: none;\n  grid-gap: 2px;\n  margin-bottom: 8px;\n\n  @media (min-width: 46em) {\n    display: grid;\n    grid-template-columns: 2fr 1fr 1fr;\n    padding: 4px;\n    grid-gap: 4px;\n  }\n`;\nconst title = css`\n  font-weight: 600;\n`;\n\nconst speaker = css`\n  font-weight: 600;\n`;\n\nconst date = css`\n  font-weight: 600;\n  text-align: right;\n`;\n\nconst TalkListHeader = () => {\n  return (\n    <div className={talkListHeader}>\n      <div className={title}>Title</div>\n      <div className={speaker}>Speaker</div>\n      <div className={date}>Date Created</div>\n    </div>\n  );\n};\n\nexport default TalkListHeader;\n","import * as React from 'react';\nimport { css } from 'react-emotion';\n\nconst mobilePager = css`\n  text-align: right;\n  padding: 24px;\n  @media (min-width: 46em) {\n    display: none\n  }\n`;\n\nconst MobilePager = ({ loadPage, endIndex, total }) => {\n\n    const handleLoadMore = () => {\n      console.log(endIndex);\n        loadPage(0, endIndex + 10)\n    }\n\n    return (\n      endIndex + 10 <= total && \n      <div onClick={handleLoadMore} className={mobilePager}>\n            Load more\n      </div>\n    );\n};\n\nexport default MobilePager;","import * as React from 'react';\nimport { css } from 'react-emotion';\nimport { range } from 'lodash';\n\nconst pagingBar = css`\n  display: flex;\n  @media (max-width: 46em) {\n    display: none\n  }\n`;\n\nconst jumpTo = css`\n  padding: 0 8px;\n  cursor: pointer;\n  &:hover {\n      background-color: grey;\n  }\n`;\n\nconst currentPage = css`\n  ${jumpTo}\n  font-weight: 600;\n  color: blue;\n`;\n\nconst previousLink = css`\n  margin-left: auto;\n`;\n\nconst nextLink = css`\n  width: 65px;\n`;\n\nconst DesktopPager = ({ loadPage, startIndex, endIndex, total }) => {\n\n    const handleLoadNext = () => {\n        if (startIndex === 0 && endIndex > 10) {\n            startIndex = endIndex - 10;\n        }\n        loadPage(startIndex + 10, endIndex + 10)\n    }\n\n    const handleLoadPrevious = () => {\n        if (startIndex === 0 && endIndex > 10) {\n            startIndex = endIndex - 10;\n        }\n        loadPage(startIndex - 10, endIndex - 10)\n    }\n    const handleJumpTo = (page) => () => {\n        loadPage(page * 10, page * 10 + 10)\n    }\n\n    const next = endIndex + 10 <= total && <div onClick={handleLoadNext}>Next</div>\n    const previous = endIndex > 10 && <div onClick={handleLoadPrevious}>Previous</div>\n    const jumpToLinks = range(0, total/10).map((num) => {\n        const style = (endIndex / 10 === num + 1) ? currentPage : jumpTo;\n        return <div onClick={handleJumpTo(num)} className={style} key={num}>{num + 1}</div>;\n    })\n\n    return (\n        <div className={pagingBar}>\n            <div> Showing {startIndex + 1} to {endIndex} of {total} </div>\n            <div className={previousLink}>{previous}</div>\n\n            {jumpToLinks}\n \n            <div className={nextLink}>{next}</div> \n        </div>\n    );\n};\n\nexport default DesktopPager;\n","import * as React from 'react';\nimport { css, keyframes } from 'react-emotion';\n\nconst ripple = keyframes`\n0% {\n    top: 28px;\n    left: 28px;\n    width: 0;\n    height: 0;\n    opacity: 1;\n  }\n  100% {\n    top: -1px;\n    left: -1px;\n    width: 58px;\n    height: 58px;\n    opacity: 0;\n  }\n`\nconst loading = css`\n  display: block;\n  position: relative;\n  height: 64px;\n  width: 64px;\n  margin: auto;\n  & div {\n    position: absolute;\n    border: 4px solid #ccc;\n    opacity: 1;\n    border-radius: 50%;\n    animation: ${ripple} 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n  }\n  & div:nth-child(2) {\n    animation-delay: -0.5s;\n  }\n`;\n\nconst Loading = () => {\n\n    return (\n        <div className={loading}>\n            <div ></div>\n            <div ></div>\n        </div>\n    );\n};\n\nexport default Loading;","export const config = {\n    appName: 'Christadelphian Bible Talks',\n    apiUrl: 'https://christadelphianbibletalks.com/api/v2',\n    latestTalks: '/studies/list?params={%22where%22:{%22approved%22:2},%22orderBy%22:%22date_entered%22,%22order%22:%22DESC%22,%22offset%22:0,%22count%22:100}'\n}","import React, { useState, useEffect } from 'react';\nimport * as axios from 'axios';\n\nimport Loading from './Loading';\nimport { config } from '../config';\n\nconst ListLoader = ({ listState: { list, updateList, startIndex, endIndex, loadPage }, render, path }) => {\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (list.length === 0) {\n            setLoading(true);\n            axios.get(`${config.apiUrl}${path}`)\n                .then(response => {\n                    updateList(response.data)\n                    setLoading(false);\n                });\n        } else {\n            setLoading(false);\n        }\n    }, []);\n\n    if (loading) {\n        return <Loading />\n    }\n\n    return render({\n        list,\n        startIndex,\n        endIndex,\n        loadPage,\n    });\n}\n\nexport default ListLoader;\n","import React, { useState } from 'react';\n\nexport const TalkContext = React.createContext();\n\nconst TalkStore = ({children}) => {\n  const [talkList, setTalkList] = useState([]);\n  const [startIndex, setStartIndex] = useState(0);\n  const [endIndex, setEndIndex] = useState(10);\n\n  const updateTalkList = (talkList) => {\n    setTalkList(talkList);\n  }\n\n  const loadPage = (startIndex, endIndex) => {\n    setStartIndex(startIndex);\n    setEndIndex(endIndex);\n  }\n\n  return (\n    <TalkContext.Provider value={{\n      list: talkList,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      updateList: updateTalkList,\n      loadPage: loadPage\n    }}>\n      {children}\n    </TalkContext.Provider>\n  );\n\n}\n\nexport default TalkStore;\n","import React from 'react';\nimport { css } from 'react-emotion';\n\nimport TalkListItem from './TalkListItem';\nimport TalkListHeader from './TalkListHeader';\nimport MobilePager from './MobilePager';\nimport DesktopPager from './DesktopPager';\nimport ListLoader from './ListLoader';\nimport { TalkContext } from './TalkStore';\nimport { config } from '../config';\n\nconst listWrapper = css`\n  max-width: 1200px;\n  padding: 24px;\n  margin: auto;\n`;\n\nconst talkList = ({ list, loadPage, startIndex, endIndex }) => (\n  <div>\n    <ul className={listWrapper}>\n      <TalkListHeader />\n      {list.slice(startIndex, endIndex)\n        .map((talk) => (\n          <TalkListItem key={talk.id} talk={talk} />\n        ))}\n    </ul>\n    <DesktopPager\n      total={list.length}\n      startIndex={startIndex}\n      endIndex={endIndex}\n      loadPage={loadPage} ></DesktopPager>\n\n    <MobilePager\n      total={list.length}\n      endIndex={endIndex}\n      loadPage={loadPage} ></MobilePager>\n  </div>\n)\n\nconst TalkList = () => (\n  <TalkContext.Consumer>\n    {talkState => (\n      <ListLoader listState={talkState} path={config.latestTalks} render={talkList} />\n    )}\n  </TalkContext.Consumer>\n);\n\nexport default TalkList;\n","import * as React from 'react';\n\nconst TalkDetails = ({ match }) => {\n  return (\n    <div>Full details will show here  for Talk id : {match.params.id}</div>\n  );\n};\n\nexport default TalkDetails;\n\n","import React from 'react';\nimport { css } from 'react-emotion';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './App.css';\nimport TalkList from './components/TalkList';\nimport TalkDetails from './components/TalkDetails';\nimport TalkStore from './components/TalkStore';\nimport { config } from './config'\n\nconst appHeading = css`\n  width: 95%;\n  margin: auto\n`;\n\nconst App = () => {\n  return (\n    <Router basename={'/cbt'}>\n      <div className=\"App\">\n        <h1 className={appHeading}>{config.appName}</h1>\n        <TalkStore>\n          <Route exact path=\"/\" component={TalkList} />\n          <Route path=\"/details/:id\" component={TalkDetails} />\n        </TalkStore>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}