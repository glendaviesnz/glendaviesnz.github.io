{"version":3,"sources":["Mp3ListItem.js","config.js","Mp3List.js","App.js","serviceWorker.js","index.js"],"names":["title","css","_templateObject","speaker","_templateObject2","date","_templateObject3","Mp3ListItem","_ref","mp3","console","log","react","className","dateParts","split","concat","formatDate","date_entered","config","mp3ListTable","Mp3List_templateObject","Mp3List","state","mp3List","_this2","this","axios","then","response","setState","data","map","react_default","a","createElement","src_Mp3ListItem","key","id","Component","appHeading","App_templateObject","App","src_Mp3List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"irBAGA,IAAMA,EAAQC,YAAHC,KAOLC,EAAUF,YAAHG,KAOPC,EAAOJ,YAAHK,KAgBKC,EAXK,SAAAC,GAAW,IAATC,EAASD,EAATC,IAElB,OADAC,QAAQC,IAAIF,GAEZG,EAAA,wBACEA,EAAA,oBAAIC,UAAWb,GAASS,EAAIT,OAC5BY,EAAA,oBAAIC,UAAWV,GAAWM,EAAIN,SAC9BS,EAAA,oBAAIC,UAAWR,GAOrB,SAAoBA,GAEhB,IAEMS,EAAYT,EAAKU,MAAM,KAE7B,SAAAC,OAJoB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAI5EF,EAAU,GAAK,GAArC,KAAAE,OAA2CF,EAAU,IAb5BG,CAAWR,EAAIS,iBC5BrC,IAAMC,EACA,8BADAA,EAED,yTCKZ,IAAMC,EAAenB,YAAHoB,KAyBHC,6MAlBbC,MAAQ,CAAEC,QAAS,uFAEC,IAAAC,EAAAC,KAClBC,MAAUR,GACPS,KAAK,SAAAC,GACJJ,EAAKK,SAAS,CAAEN,QAASK,EAASE,0CAKtC,IAAIP,EAAUE,KAAKH,MAAMC,QAAQQ,IAAI,SAAUvB,GAC7C,OAAOwB,EAAAC,EAAAC,cAACC,EAAD,CAAaC,IAAK5B,EAAI6B,GAAI7B,IAAKA,MAGxC,OAAOwB,EAAAC,EAAAC,cAAA,SAAOtB,UAAWO,GAAca,EAAAC,EAAAC,cAAA,aAAQX,WAf7Be,mHCNtB,IAAMC,EAAavC,YAAHwC,KAgBDC,mLATX,OACET,EAAAC,EAAAC,cAAA,OAAKtB,UAAU,OACboB,EAAAC,EAAAC,cAAA,MAAItB,UAAW2B,GAAarB,GAC5Bc,EAAAC,EAAAC,cAACQ,EAAD,cALUJ,aCFEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.7af7be87.chunk.js","sourcesContent":["import * as React from 'react';\nimport { css } from 'react-emotion';\n\nconst title = css`\n  width: 60%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst speaker = css`\n  width: 20%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst date = css`\n  width: 20%;\n`;\n\n\nconst Mp3ListItem = ({mp3}) => {\n    console.log(mp3);\n    return (\n    <tr>\n      <td className={title}>{ mp3.title }</td>\n      <td className={speaker}>{ mp3.speaker }</td>\n      <td className={date}>{ formatDate(mp3.date_entered ) }</td>\n    </tr>\n  );\n};\n\nexport default Mp3ListItem;\n\nfunction formatDate(date)  {\n\n    const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    const dateParts = date.split('-');\n\n    return `${shortMonths[dateParts[1] - 1]} ${dateParts[0]}`;\n}","export const config = {\n    appName: 'Christadelphian Bible Talks',\n    apiUrl: 'https://christadelphianbibletalks.com/api/v2/studies/list?params={%22where%22:{%22approved%22:2},%22orderBy%22:%22date_entered%22,%22order%22:%22DESC%22,%22offset%22:0,%22count%22:100}'\n}","import React, { Component } from 'react';\nimport * as axios from 'axios';\nimport { css } from 'react-emotion';\n\nimport Mp3ListItem from './Mp3ListItem';\nimport { config } from './config';\n\nconst mp3ListTable = css`\n  width: 95%;\n  table-layout: fixed;\n  margin: auto\n`;\n\nclass Mp3List extends Component {\n  state = { mp3List: [] }\n\n  componentDidMount() {\n    axios.get(config.apiUrl)\n      .then(response => {\n        this.setState({ mp3List: response.data })\n      });\n  }\n\n  render() {\n    var mp3List = this.state.mp3List.map(function (mp3) {\n      return <Mp3ListItem key={mp3.id} mp3={mp3} />;\n    })\n\n    return <table className={mp3ListTable}><tbody>{mp3List}</tbody></table>;\n  }\n}\n\nexport default Mp3List;\n","import React, { Component } from 'react';\nimport { css } from 'react-emotion';\n\nimport './App.css';\nimport Mp3List from './Mp3List';\nimport { config } from './config'\n\nconst appHeading = css`\n  width: 95%;\n  margin: auto\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className={appHeading}>{config.appName}</h1>\n        <Mp3List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}